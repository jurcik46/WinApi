<ResourceDictionary
	x:Class="WinApi.ViewModel.TrayIcon"	
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:tb="http://www.hardcodet.net/taskbar"
    xmlns:Commands="clr-namespace:WinApi.Commands"
	xmlns:local="clr-namespace:WinApi.ViewModel">


	<!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
	<!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
  -->
	<ContextMenu x:Shared="false" x:Key="SysTrayMenu">
		<MenuItem Header="Nastavenia" MouseEnter="MenuItem_MouseEnter" />
		<Separator />
		<MenuItem Header="Exit" Command="{Commands:ExitAppCommand}"   /> 
	</ContextMenu>


	<!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
	<tb:TaskbarIcon  x:Key="TrayIconTaskbar"
					Name="trayIconTaskbar"					
                    IconSource="/Icons/test.ico"
                    ToolTipText="Double-click for window, right-click for menu"
					ContextMenu="{StaticResource SysTrayMenu}"					
                   >

		<tb:TaskbarIcon.TrayToolTip>
			<Border    
				Background="White"
				BorderBrush="Orange"
				BorderThickness="2"
				CornerRadius="4"
				Opacity="0.8"
				Width="160"
				Height="40">
				<!-- use a binding expression rather than fixed text -->
				<TextBlock
				Text="{Binding Path=ToolTipText}"
				HorizontalAlignment="Center"
				 VerticalAlignment="Center" />
			</Border>
		</tb:TaskbarIcon.TrayToolTip>


		<!-- self-assign a data context (could also be done programmatically) -->



	</tb:TaskbarIcon>

	

</ResourceDictionary>
